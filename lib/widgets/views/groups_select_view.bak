import 'package:bangu_lite/internal/bangumi_define/bangumi_social_hub.dart';
import 'package:bangu_lite/internal/callback.dart';
import 'package:bangu_lite/internal/const.dart';
import 'package:bangu_lite/internal/custom_toaster.dart';
import 'package:bangu_lite/internal/request_client.dart';
import 'package:bangu_lite/models/providers/account_model.dart';
import 'package:bangu_lite/models/providers/groups_model.dart';
import 'package:bangu_lite/widgets/fragments/cached_image_loader.dart';
import 'package:easy_refresh/easy_refresh.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class GroupsSelectView extends StatefulWidget {
  const GroupsSelectView({
    super.key,
    required this.animatedGroupsListController,
    required this.sliverAnimatedListKey,
    required this.expansionTileController,
    required this.groupTitleNotifier,
  

  });

  final ScrollController animatedGroupsListController;
  final GlobalKey<SliverAnimatedListState> sliverAnimatedListKey;
  
  final ExpansionTileController expansionTileController;
  
  final ValueNotifier<String?> groupTitleNotifier;

  @override
  State<GroupsSelectView> createState() => _GroupsSelectViewState();
}

class _GroupsSelectViewState extends State<GroupsSelectView> with SingleTickerProviderStateMixin {

  final animatedGroupListController = ScrollController();
  final groupPageController = PageController();
  late TabController tabController;

  @override
  void initState() {

    super.initState();

    tabController = TabController(length: BangumiSurfGroupType.values.length-1, vsync: this);
    
    tabController.addListener((){
      if((tabController.index - groupPageController.page!).abs() < 0.9) return;

      groupPageController.jumpToPage(tabController.index);

      loadGroupsContent(context, tabController.index);

    });


    
  }



  @override
  void dispose() {
    tabController.dispose();
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {

    final groupsModel = context.read<GroupsModel>();
    final accountModel = context.read<AccountModel>();


    return Column(
      children: [

        TabBar(
          controller: tabController,
          onTap: (value) async {

            invokeToaster({String? message}) => fadeToaster(context: context, message: message ?? "没有更多内容了");

            if(groupsModel.groupsData[BangumiSurfGroupType.values[value]]!.isEmpty){
              await groupsModel.loadGroups(
                mode: BangumiSurfGroupType.values[value],
                accessQuery: BangumiQuerys.bearerTokenAccessQuery(accountModel.loginedUserInformations.accessToken ?? ""),
                fallbackAction: invokeToaster,
              ).then((result){
                
                List newSelectedGroupData = groupsModel.groupsData[BangumiSurfGroupType.values[value]]!;

                animatedListAppendContentCallback(
                  result,
                  0,
                  newSelectedGroupData,
                  animatedListKey: widget.sliverAnimatedListKey,
                  fallbackAction: invokeToaster,
                  animatedListController: widget.animatedGroupsListController
                );

                groupsModel.notifyListeners();


              });
            }

            
          },
          tabs: List.generate(
            BangumiSurfGroupType.values.length-1,
            (index)=> Tab(text: BangumiSurfGroupType.values[index].groupsType)
          ),
          indicatorSize: TabBarIndicatorSize.tab,
        ),

        SizedBox(
          height: 200,
          child: EasyRefresh(
            
            child: PageView.builder(
              //onPageChanged: (newPageIndex){
              //  tabController.animateTo(newPageIndex);
              //},
              controller: groupPageController,
              itemBuilder: (_,index){
                return Padding(
                  padding: Padding6,
                  child: Consumer<GroupsModel>(
                  builder: (_, groupsModel, child) {
                    return GridView.builder(
                      scrollDirection: Axis.vertical,
                      controller:animatedGroupListController,
                      itemCount: groupsModel.groupsData[BangumiSurfGroupType.values[tabController.index]]?.length ?? 0,
                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: 4,
                          crossAxisSpacing: 16,
                          mainAxisSpacing: 16,
                          mainAxisExtent: 180
                        
                        ),
                      itemBuilder: (_,index){
                        return Column(
                        spacing: 20,
                        children: [
                        
                          Expanded(
                          child: InkResponse(
                            containedInkWell: true,
                            
                            highlightColor: Colors.transparent,
                            child: ConstrainedBox(
                            constraints: const BoxConstraints(
                              minWidth: 100,
                              minHeight: 120,
                            ),
                            
                            child: CachedImageLoader(
                              imageUrl: groupsModel.groupsData[BangumiSurfGroupType.values[tabController.index]]?[index].groupAvatar,
                              borderDecoration: BoxDecoration(borderRadius: BorderRadius.circular(12)),
                            ),
                            ),
                          ),
                          ),
                        
                          SizedBox(
                          height: 65,
                          child: Center(
                                            
                            child: Text(
                            "${groupsModel.groupsData[BangumiSurfGroupType.values[tabController.index]]?[index].groupTitle}"
                            "\n(${groupsModel.groupsData[BangumiSurfGroupType.values[tabController.index]]?[index].membersCount}成员)",
                            textAlign: TextAlign.center,
                            maxLines: 3,
                            overflow: TextOverflow.ellipsis,
                            ),
                            
                          )
                          ),
                        
                        ],
                        );
                      }
                    );
                  },
                  
                  )
                );
              }
            ),
          ),
        ),
      ],
    );
  }

  void loadGroupsContent(BuildContext context,int index) async {
    invokeToaster({String? message}) => fadeToaster(context: context, message: message ?? "没有更多内容了");

    final groupsModel = context.read<GroupsModel>();
    final accountModel = context.read<AccountModel>();

    if(groupsModel.groupsData[BangumiSurfGroupType.values[index]]!.isEmpty){
      await groupsModel.loadGroups(
        mode: BangumiSurfGroupType.values[index],
        accessQuery: BangumiQuerys.bearerTokenAccessQuery(accountModel.loginedUserInformations.accessToken ?? ""),
        fallbackAction: invokeToaster,
      ).then((result){
        
        List newSelectedGroupData = groupsModel.groupsData[BangumiSurfGroupType.values[index]]!;

        animatedListAppendContentCallback(
          result,
          0,
          newSelectedGroupData,
          //animatedListKey: widget.sliverAnimatedListKey,
          fallbackAction: invokeToaster,
          animatedListController: widget.animatedGroupsListController
        );

        groupsModel.notifyListeners();


      });
    }
  }

}