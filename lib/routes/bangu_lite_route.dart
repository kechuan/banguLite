// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// version: 10.1.0
// **************************************************************************
// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import,unnecessary_import,unused_shown_name,implementation_imports,duplicate_import,library_private_types_in_public_api
import 'package:bangu_lite/models/providers/comment_model.dart';
import 'package:bangu_lite/models/providers/ep_model.dart';
import 'package:bangu_lite/models/providers/topic_model.dart';
import 'package:bangu_lite/models/topic_info.dart';
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';

import '../catalogs/bangumi_comment_page.dart';
import '../catalogs/bangumi_detail_page.dart';
import '../catalogs/bangumi_ep_page.dart';
import '../catalogs/bangumi_index_page.dart';
import '../catalogs/bangumi_picture_view_page.dart';
import '../catalogs/bangumi_topic_page.dart';
import '../catalogs/more_topics_page.dart';

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case '/index':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiIndexPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/moreTopics':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => MoreTopicsPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          topicsList: asT<List<TopicInfo>>(
            safeArguments['topicsList'],
          )!,
          topicModel: asT<TopicModel>(
            safeArguments['topicModel'],
          )!,
          title: asT<String?>(
            safeArguments['title'],
          ),
        ),
      );
    case '/photoView':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiPictureViewPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          imageProvider: asT<ImageProvider>(
            safeArguments['imageProvider'],
          )!,
        ),
      );
    case '/subjectComment':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiCommentPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          commentModel: asT<CommentModel>(
            safeArguments['commentModel'],
          )!,
          subjectID: asT<int>(
            safeArguments['subjectID'],
          )!,
          name: asT<String?>(
            safeArguments['name'],
          ),
        ),
      );
    case '/subjectDetail':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiDetailPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          subjectID: asT<int>(
            safeArguments['subjectID'],
          )!,
        ),
      );
    case '/subjectEp':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiEpPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          epModel: asT<EpModel>(
            safeArguments['epModel'],
          )!,
          totalEps: asT<int>(
            safeArguments['totalEps'],
          )!,
        ),
      );
    case '/subjectTopic':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiTopicPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          topicModel: asT<TopicModel>(
            safeArguments['topicModel'],
          )!,
          topicInfo: asT<TopicInfo>(
            safeArguments['topicInfo'],
          )!,
        ),
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
