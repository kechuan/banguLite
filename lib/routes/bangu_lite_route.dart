// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// version: 10.1.0
// **************************************************************************
// ignore_for_file: prefer_const_literals_to_create_immutables,unused_local_variable,unused_import,unnecessary_import,unused_shown_name,implementation_imports,duplicate_import,library_private_types_in_public_api
import 'package:bangu_lite/internal/bangumi_define/logined_user_action_const.dart';
import 'package:bangu_lite/internal/const.dart';
import 'package:bangu_lite/models/informations/subjects/comment_details.dart';
import 'package:bangu_lite/models/informations/subjects/group_details.dart';
import 'package:bangu_lite/models/informations/subjects/group_topic_info.dart';
import 'package:bangu_lite/models/informations/subjects/review_details.dart';
import 'package:bangu_lite/models/informations/subjects/topic_info.dart';
import 'package:bangu_lite/models/providers/comment_model.dart';
import 'package:bangu_lite/models/providers/ep_model.dart';
import 'package:bangu_lite/models/providers/groups_model.dart';
import 'package:bangu_lite/models/providers/review_model.dart';
import 'package:bangu_lite/models/providers/topic_model.dart';
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';

import '../catalogs/about_page.dart';
import '../catalogs/bangumi_group_topic_page.dart';
import '../catalogs/bangumi_picture_view_page.dart';
import '../catalogs/bangumi_webview_page.dart';
import '../catalogs/index/bangumi_index_page.dart';
import '../catalogs/index/settings_page.dart';
import '../catalogs/subject/bangumi_blog_page.dart';
import '../catalogs/subject/bangumi_comment_page.dart';
import '../catalogs/subject/bangumi_detail_page.dart';
import '../catalogs/subject/bangumi_ep_page.dart';
import '../catalogs/subject/bangumi_topic_page.dart';
import '../catalogs/subject/more_reviews_page.dart';
import '../catalogs/subject/more_topics_page.dart';
import '../catalogs/surf/bangumi_groups_page.dart';
import '../catalogs/surf/bangumi_history_page.dart';
import '../catalogs/surf/bangumi_login_auth_page.dart';
import '../catalogs/surf/bangumi_surf_timeline_page.dart';
import '../catalogs/surf/bangumi_timeline_chat_page.dart';
import '../catalogs/surf/banumi_user_page.dart';
import '../catalogs/surf/send_comment_page.dart';
import '../catalogs/surf/send_comment_preview_page.dart';

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  final Map<String, dynamic> safeArguments =
      arguments ?? const <String, dynamic>{};
  switch (name) {
    case '/Blog':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiBlogPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          reviewModel: asT<ReviewModel>(
            safeArguments['reviewModel'],
          )!,
          reviewInfo: asT<ReviewInfo>(
            safeArguments['reviewInfo'],
          )!,
          themeColor: asT<Color?>(
            safeArguments['themeColor'],
          ),
        ),
      );
    case '/Groups':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiGroupsPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          selectedGroupInfo: asT<GroupInfo?>(
            safeArguments['selectedGroupInfo'],
          ),
        ),
      );
    case '/Timeline':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiTimelinePage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/TimelineChat':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiTimelineChatPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          timelineID: asT<int>(
            safeArguments['timelineID'],
          )!,
          comment: asT<String>(
            safeArguments['comment'],
          )!,
        ),
      );
    case '/commentPreview':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SendCommentPreview(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          renderText: asT<String>(
            safeArguments['renderText'],
          )!,
        ),
      );
    case '/groupTopic':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiGroupTopicPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          groupsModel: asT<GroupsModel>(
            safeArguments['groupsModel'],
          )!,
          groupTopicInfo: asT<GroupTopicInfo>(
            safeArguments['groupTopicInfo'],
          )!,
          themeColor: asT<Color?>(
            safeArguments['themeColor'],
          ),
        ),
      );
    case '/history':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiHistoryPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/index':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiIndexPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/loginAuth':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiAuthPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case '/moreReviews':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => MoreReviewsPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          reviewModel: asT<ReviewModel>(
            safeArguments['reviewModel'],
          )!,
          bangumiThemeColor: asT<Color?>(
            safeArguments['bangumiThemeColor'],
          ),
          title: asT<String?>(
            safeArguments['title'],
          ),
        ),
      );
    case '/moreTopics':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => MoreTopicsPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          topicModel: asT<TopicModel>(
            safeArguments['topicModel'],
          )!,
          bangumiThemeColor: asT<Color?>(
            safeArguments['bangumiThemeColor'],
          ),
          title: asT<String?>(
            safeArguments['title'],
          ),
        ),
      );
    case '/photoView':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiPictureViewPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          imageProvider: asT<ImageProvider>(
            safeArguments['imageProvider'],
          )!,
        ),
      );
    case '/sendComment':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SendCommentPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          contentID: asT<int?>(
            safeArguments['contentID'],
          ),
          replyID: asT<int?>(
            safeArguments['replyID'],
          ),
          title: asT<String?>(
            safeArguments['title'],
          ),
          postCommentType: asT<PostCommentType?>(
            safeArguments['postCommentType'],
          ),
          actionType: asT<UserContentActionType?>(
            safeArguments['actionType'],
          ),
          referenceObject: asT<String?>(
            safeArguments['referenceObject'],
          ),
          onSendMessage: asT<Function(String)?>(
            safeArguments['onSendMessage'],
          ),
          preservationContent: asT<(String, String)?>(
            safeArguments['preservationContent'],
          ),
          themeColor: asT<Color?>(
            safeArguments['themeColor'],
          ),
        ),
      );
    case '/subjectComment':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiCommentPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          commentModel: asT<CommentModel>(
            safeArguments['commentModel'],
          )!,
          subjectID: asT<int>(
            safeArguments['subjectID'],
          )!,
          bangumiThemeColor: asT<Color?>(
            safeArguments['bangumiThemeColor'],
          ),
          name: asT<String?>(
            safeArguments['name'],
          ),
        ),
      );
    case '/subjectDetail':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiDetailPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          subjectID: asT<int>(
            safeArguments['subjectID'],
          )!,
        ),
      );
    case '/subjectEp':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiEpPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          epModel: asT<EpModel>(
            safeArguments['epModel'],
          )!,
          totalEps: asT<int>(
            safeArguments['totalEps'],
          )!,
          bangumiThemeColor: asT<Color?>(
            safeArguments['bangumiThemeColor'],
          ),
        ),
      );
    case '/subjectTopic':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiTopicPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          topicModel: asT<TopicModel>(
            safeArguments['topicModel'],
          )!,
          topicInfo: asT<TopicInfo>(
            safeArguments['topicInfo'],
          )!,
          themeColor: asT<Color?>(
            safeArguments['themeColor'],
          ),
        ),
      );
    case '/webview':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BangumiWebviewPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
          url: asT<String>(
            safeArguments['url'],
          )!,
          title: asT<String?>(
            safeArguments['title'],
          ),
          injectHTML: asT<String?>(
            safeArguments['injectHTML'],
          ),
          onTargetUrlReached: asT<Function(String?)?>(
            safeArguments['onTargetUrlReached'],
          ),
        ),
      );
    case 'about':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => AboutPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case 'settings':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => SettingsPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    case 'userPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => BanumiUserPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
